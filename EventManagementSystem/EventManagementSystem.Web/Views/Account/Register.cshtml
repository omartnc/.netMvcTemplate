@using EventManagementSystem.Web.Helpers
@model EventManagementSystem.Web.Models.AccountModel
@{
    Layout = "~/Views/Shared/_AccountLayout.cshtml";
}
@section Styles
{
    <style>
        .kurumsalDiv {
            display: none;
        }

        .kisiselDiv {
            display: none;
        }
    </style>
}

<div class="card card-round card-shadowed px-50 py-30 w-600px mb-0" style="max-width: 100%">
    <img src="/assets/img/logo_login.png" style="width:200px;height:auto;margin: 0 auto;" />
    <br />
    <h5 class="text" style="text-align: center; font-weight: 600;">İnşaat Hesabı dünyasına girmek için Kayıt formunu doldurun:</h5>
    <br />
    <div class="text-center login-account-preview" id="AccountPreview">
        <img id="Photo" class="avatar avatar-xxl" style="border-width: 2px;border-color: #ccc;border-style: solid;" src="~/assets/img/avatar/avatar_profile.jpg">
        <h5 id="FullName" class="mt-3 mb-1"></h5>
        <p id="DepartmentName" class="text-fade"></p>
    </div>
    @if (Request.QueryString["Auth"] != null)
    {
        <div class="alert alert-danger">
            <strong>@(Request.QueryString["ReturnUrl"])</strong><br /><br />
            Erişmek istediğiniz sayfaya <strong>yetkiniz bulunmamaktadır.</strong><br /><br />
            <a href="/">Ana Sayfaya Dön</a>
        </div>
    }
    else
    {
        <form id="registerForm" method="post">
            <div class="row">
                @if (Model.HasError)
        {
            <div class="alert alert-danger">
                <strong>Hata Oluştu!</strong> @Model.ErrorMessage
            </div>
}
                @if (Model.CaptchaStatus == "Her Zaman Aktif" || (Model.CaptchaStatus == "Hatalı Girişte Aktif" && Model.HasError))
        {
            @Html.HiddenFor(model => model.HasError)
            <div class="form-group">
                @Html.GoogleReCaptcha()
            </div>
}
                <div class="form-group col-md-6">
                    <label>İsim Soyisim:</label>
                    @Html.TextBoxFor(model => model.User.FullName, new { @class = "form-control" })
                </div>
                <div class="form-group col-md-6">
                    <label>E-Posta Adresi:</label>
                    @Html.TextBoxFor(model => model.User.Email, new { @class = "form-control" })
                </div>
            </div>
            <div class="row">
                <div class="form-group col-md-6">
                    <label>Şifre:</label>
                    @Html.PasswordFor(model => model.User.Password, new { @class = "form-control" })
                </div>
                <div class="form-group col-md-6">
                    <label>Şifre Tekrarı:</label>
                    @Html.PasswordFor(model => model.PasswordConfirmation, new { @class = "form-control" })
                </div>
            </div>
            <div class="row">
                <div class="form-group kisiselDiv col-md-6">
                    <label>TCKN (Tc Kimlik Numarası):</label>
                    @Html.TextBoxFor(model => model.User.TCKN, new { @class = "form-control" })
                </div>
            </div>
            <div class="row">
                <div class="form-group kurumsalDiv col-md-4">
                    <label>Firma Adı:</label>
                    @Html.TextBoxFor(model => model.User.CompanyName, new { @class = "form-control" })
                </div>
            </div>
            <div class="row">
                <div class="form-group col-md-12">
                    <label>Adres:</label>
                    @Html.TextBoxFor(model => model.User.Adress, new { @class = "form-control" })
                </div>
            </div>
            <div class="row">
                <div class="form-group col-md-6">
                    <label>Cep Telefonu:</label>
                    @Html.TextBoxFor(model => model.User.PhoneNumber, new { @class = "form-control", data_format = "+90 ({{999}}) {{999}} {{9999}}" })
                </div>
            </div>
            <div class="row">
                <div class="form-group col-md-9">
                    <label class="switch switch-lg switch-success">
                        @Html.CheckBoxFor(model => model.User.MailPermission, new { @class = "parent pr2" })
                        <span class="switch-indicator"></span>
                        <span class="switch-description">
                            E-posta ve SMS yoluyla bilgi almak istiyorum.
                        </span>
                    </label>
                </div>
                <div class="form-group col-md-3">
                    <button class="btn btn-bold btn-block btn-info" type="submit">KAYIT OL</button>
                </div>
            </div>
        </form>
    }
</div>

@section Scripts{
    <script src="/assets/vendor/jquery-validation/jquery.validate.min.js"></script>
    <script src="/assets/vendor/jquery-validation/localization/messages_tr.min.js"></script>
    @if (Model.HasError)
    {
        <script>
            $(function () {
                $("#LoginErrorMessage").show();
            });
        </script>
    }
    <script>
        $(document).ready(function () {
            $("select[required]").css({ display: "inline", height: 0, padding: 0, width: 0 });
        });
    </script>
    <script data-provide="sweetalert">
        $(function () {
            $("#registerForm").validate({
                ignore: ".ignore",
                rules: {
                    "@(Html.NameFor(model => model.SelectedCountryId))": { required: true },
                    "@(Html.NameFor(model => model.SelectedProvinceId))": { required: true },
                    "@(Html.NameFor(model => model.SelectedDistrictId))": { required: true },
                    "@(Html.NameFor(model => model.SelectedLicenseTypeId))": { required: true },
                    "@(Html.NameFor(model => model.User.FullName))": { required: true },
                    "@(Html.NameFor(model => model.User.Email))": { required: true, email: true },
                    "@(Html.NameFor(model => model.User.Password))": { required: true },
                    "@(Html.NameFor(model => model.User.Adress))": { required: true },
                    "@(Html.NameFor(model => model.User.PhoneNumber))": { required: true },
                    "@(Html.NameFor(model => model.PasswordConfirmation))": { required: true },
                }
            });
        });
    </script>
    @*<script>
        var selected = $("#@(Html.IdFor(model => model.User.UsereType))").find("option:selected").val();
        if (selected == 0) {

            $(".kurumsalDiv").css("display", "none");
            $(".kisiselDiv").css("display", "block");
        }
        else if (selected == 1) {

            $(".kurumsalDiv").show();
            $(".kisiselDiv").css("display", "block");
        }

        $("#@(Html.IdFor(model => model.User.UsereType))").change(function () {

            var selected1 = $(this).find("option:selected").val();

            if (selected1 == 0) {

                $(".kurumsalDiv").css("display", "none");
                $(".kisiselDiv").css("display", "block");
            }
            else if (selected1 == 1) {

                $(".kurumsalDiv").css("display", "block");
                $(".kisiselDiv").css("display", "none");
            }
        });

        $("#@(Html.IdFor(model => model.SelectedCountryId))").change(function () {

            var selected = $(this).find("option:selected").val();

            $.ajax({
                url: ReplaceParameters('@Url.Action("GetProvincesByCountryId", new{ CountryId = -1})', selected),
                success: function (result) {
                    if (result) {

                        $("#@(Html.IdFor(model => model.SelectedDistrictId))").empty();
                        $("#@(Html.IdFor(model => model.SelectedDistrictId))").append('<option value="">İlçe</option>');
                        //$("#@(Html.IdFor(model => model.SelectedDistrictId))").selectpicker('refresh');

                        $("#@(Html.IdFor(model => model.SelectedProvinceId))").empty();
                       // $("#@(Html.IdFor(model => model.SelectedProvinceId))").selectpicker('refresh');

                        $("#@(Html.IdFor(model => model.SelectedProvinceId))").append('<option value="">İl</option>');
                        $.each(result, function (index, value) {
                            $("#@(Html.IdFor(model => model.SelectedProvinceId))").append('<option value="' + value.Id + '">' + value.Name + '</option>');
                        });
                        //$("#@(Html.IdFor(model => model.SelectedProvinceId))").selectpicker('refresh');
                    }
                }
            });
        });

        $("#@(Html.IdFor(model => model.SelectedProvinceId))").change(function () {

            var selected = $(this).find("option:selected").val();

            $.ajax({
                url: ReplaceParameters('@Url.Action("GetDistrictsByProvinceId", new{ ProvinceId = -1})', selected),
                success: function (result) {
                    if (result) {
                        $("#@(Html.IdFor(model => model.SelectedDistrictId))").empty();
                        //$("#@(Html.IdFor(model => model.SelectedDistrictId))").selectpicker('refresh');

                        $("#@(Html.IdFor(model => model.SelectedDistrictId))").append('<option value="">İlçe</option>');
                        $.each(result, function (index, value) {
                            $("#@(Html.IdFor(model => model.SelectedDistrictId))").append('<option value="' + value.Id + '">' + value.Name + '</option>');
                        });
                        //$("#@(Html.IdFor(model => model.SelectedDistrictId))").selectpicker('refresh');
                    }
                }
            });
        });
    </script>*@
}